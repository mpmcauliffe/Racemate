# import UserOrderByInput from './generated/prisma.graphql'

type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    me: User!
}

type Mutation {
    ### USER
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!

    ### EXERCISE
    createExercise(data: CreateExerciseInput): Exercise!
}


#####################################################################
### USER & AUTHENTICATION
#####################################################################

type AuthPayload {
    token: String!
    user: User!
}
input CreateUserInput {
    name: String!
    email: String!
    password: String!
}
input LoginUserInput {
    email: String!
    password: String!
}
input UpdateUserInput {
    name: String
    email: String
    password: String
}
type User {
    id: ID!
    name: String!
    email: String
    password: String!
    updatedAt: String!
    createdAt: String!
}


#####################################################################
### USER & AUTHENTICATION
#####################################################################

type Exercise {
    id: ID!
    title: String!
    exerciseType: String!
    desciption: String
    sets: [Set!]
    notes: String
}
input CreateExerciseInput {
    title: String!
    exerciseType: String!
    desciption: String
    sets: [Set!]
    notes: String
}



enum MutationType {
    CREATED
    UPDATED
    DELETED
}
