
type Query {
    users(query: String, first: Int, skip: Int, after: String): [User!]!
    exercises(query: String, first: Int, skip: Int, after: String): [Exercise!]!
    myExercises(query: String, first: Int, skip: Int, after: String): [Exercise!]!
    workouts(query: String, first: Int, skip: Int, after: String): [Workout!]!
    me: User!
}

type Mutation {
    ### USER
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!

    ### EXERCISE
    createExercise(data: CreateExerciseInput): Exercise!
    updateExercise(data: UpdateExerciseInput): Exercise!
    deleteExercise(id: ID!): Exercise!

    ### WORKOUT
    createWorkout(data: CreateWorkoutInput): Workout!
    updateWorkout(data: UpdateWorkoutInput): Workout!
    deleteWorkout(id: ID!): Workout!
}


#####################################################################
### USER & AUTHENTICATION
#####################################################################

type AuthPayload {
    token: String!
    user: User!
}
input CreateUserInput {
    name: String!
    email: String!
    password: String!
}
input LoginUserInput {
    email: String!
    password: String!
}
input UpdateUserInput {
    name: String
    email: String
    password: String
}
type User {
    _id: ID!
    name: String!
    email: String!
    password: String
    exercises: [Exercise!]
    workouts: [Workout!]
}


#####################################################################
### EXERCISES
#####################################################################

type Exercise {
    id: ID!
    title: String!
    exerciseType: String!
    description: String
    sets: [Set!]
    notes: String
    owner: User!
}
input CreateExerciseInput {
    title: String!
    exerciseType: String!
    description: String
    # sets: [Set!]
    notes: String
}
input UpdateExerciseInput {
    title: String
    exerciseType: String
    description: String
    # sets: [Set!]
    notes: String
}
type Set {
    createdAt: String!
    reps: [Int]
    weight: [Int]
    distance: Float
    time: Float
}


#####################################################################
### WORKOUTS
#####################################################################

type Workout {
    id: ID! 
    title: String!
    exercises: [Exercise!]!
    owner: User! 
}
input CreateWorkoutInput {
    title: String!
    exercises: String!
    # owner: User! 
}
input UpdateWorkoutInput {
    title: String
    # exercises: [Exercise!]
    # owner: User 
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}
